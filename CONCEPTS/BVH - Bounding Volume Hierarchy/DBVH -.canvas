{
	"nodes":[
		{"id":"df271b4988ea301d","type":"file","file":"CONCEPTS/BVH - Bounding Volume Hierarchy/BVH Bounding Volume Hierarchy.md","x":-820,"y":-320,"width":840,"height":975},
		{"id":"492247bc1ee73b1d","type":"file","file":"CONCEPTS/BVH - Bounding Volume Hierarchy/AABB (Axis Aligned Bounding Box).md","x":320,"y":-380,"width":400,"height":400},
		{"id":"c9b40f8f91313f90","type":"text","text":"```CSHARP\n\npublic struct AABB{\n\tVector3 lb;    //lowerbounds\n\tVector3 up;    //upper bounds\n}\n\n```\n\n","x":820,"y":-337,"width":503,"height":217,"color":"6"},
		{"id":"e687d4878f5d17db","type":"text","text":"```CSHARP\n\npublic AABB Union(AABB A, AABB B){\n\nAABB C; \nC.lb = Min(A.lb, B.lb); \nC.ub = Max(A.ub, B.ub); \nreturn C; \n}\n\n```\n\n","x":820,"y":20,"width":503,"height":217,"color":"6"},
		{"id":"5b6413017276a708","type":"text","text":"#### AREA\n```CSHARP\npublic float Area()  \n{  \n    Vector3 c = _ub - _lb;  \n    return 2.0f * (c.x * c.y + c.y * c.z + c.z * c.x);  \n}\n``` ","x":1621,"y":20,"width":459,"height":217},
		{"id":"2c22f5044e9d7b21","x":-1400,"y":-161,"width":302,"height":82,"type":"text","text":"For storing the hierarchy, a <span style=\"color:#ababf5;\">Binary tree</span> is used. \n"},
		{"id":"5d7d5602a5c82536","x":-2540,"y":-320,"width":938,"height":400,"type":"file","file":"CONCEPTS/Data Tree - Basics.md"},
		{"id":"4659827959890ef6","x":-2540,"y":400,"width":938,"height":454,"type":"file","file":"CONCEPTS/Data Tree - Search.md"},
		{"id":"2c61fc50dc231b18","x":-1407,"y":599,"width":309,"height":56,"type":"text","text":"To evaluate if an object is contained in the <span style=\"color:#ababf5;\">hierarchy</span>. "},
		{"id":"e863fdff96c140e0","x":-2410,"y":1040,"width":678,"height":442,"type":"text","text":"### IMPLEMENTATION FOR MULTINODE TREES\n\nMultinode trees are the ones with more than 2 children nodes per node, impliying that rae not a binary tree. \n\n```CSHARP\npublic void TraverseNode(Node node)\n{\n\tif(node.IsLeaf())\n\t{\n\t\t// Code to execute with children\n\t\treturn; \n\t}\n\telse\n\t{\n\t\t//Code to execute with nodes\n\t\tforeach(Node nodef in node.children)\n\t\t{\n\t\t\tTraverseNode(nodef); \n\t\t}\n\t}\n}\n``` "}
	],
	"edges":[
		{"id":"9ff0c6a4fa4e6f35","fromNode":"492247bc1ee73b1d","fromSide":"right","toNode":"c9b40f8f91313f90","toSide":"left"},
		{"id":"ea9d3768b6da9c0b","fromNode":"c9b40f8f91313f90","fromSide":"bottom","toNode":"e687d4878f5d17db","toSide":"top","color":"#0008ff"},
		{"id":"004a69635d7261ad","fromNode":"df271b4988ea301d","fromSide":"right","toNode":"492247bc1ee73b1d","toSide":"left"},
		{"id":"7e2372fb58c51c46","fromNode":"e687d4878f5d17db","fromSide":"right","toNode":"5b6413017276a708","toSide":"left"},
		{"id":"2d3edc78ed2e7688","fromNode":"df271b4988ea301d","fromSide":"left","toNode":"2c22f5044e9d7b21","toSide":"right"},
		{"id":"bb9fcf09ed6a73a6","fromNode":"2c22f5044e9d7b21","fromSide":"left","toNode":"5d7d5602a5c82536","toSide":"right"},
		{"id":"e861792b1b2cc787","fromNode":"df271b4988ea301d","fromSide":"left","toNode":"2c61fc50dc231b18","toSide":"right"},
		{"id":"1e4d326bb540afdd","fromNode":"2c61fc50dc231b18","fromSide":"left","toNode":"4659827959890ef6","toSide":"right"},
		{"id":"50d9eae16dda06e1","fromNode":"4659827959890ef6","fromSide":"bottom","toNode":"e863fdff96c140e0","toSide":"top"}
	]
}