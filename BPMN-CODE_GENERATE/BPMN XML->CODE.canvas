{
	"nodes":[
		{"id":"70caa1edae75aeae","type":"text","text":"#### EXCLUSIVE GATEWAY\n\nThis element has this structure:\n\n```XML\n<bpmn:exclusiveGateway id=\"Gateway_1wohqvk\">\n\t<bpmn:incoming>Flow_11y9y90</bpmn:incoming>\n\t<bpmn:incoming>Flow_1af4ho3</bpmn:incoming>\n\t<bpmn:outgoing>Flow_0456njg</bpmn:outgoing>\n</bpmn:exclusiveGateway>\n```\n\nHaving incoming and outgoing items with the id of the `bpmn:sequenceFlow` specified. \n\nthe conditions of decision between wich sequence flow to follow are stored in the sequence \n\n","x":-2560,"y":720,"width":720,"height":400},
		{"id":"d306968d99e47e0b","type":"text","text":"#### CODE STRUCTURE\n\n```XML\n<bpmn:collaboration id=\"Collaboration_0esr49h\">\n\n\t<bpmn:participant id=\"Participant_1rtllqr\" name=\"ENEMY\" processRef=\"template-human-task-tutorial-0awx8h7\" />\n\n</bpmn:collaboration>\n\n<bpmn:process id=\"template-human-task-tutorial-0awx8h7\" isExecutable=\"true\">\n\n\t<bpmn:endEvent id=\"happy-end\" name=\"End\">\n\t\n\t\t<bpmn:incoming>Flow_1ed3zvm</bpmn:incoming>\n\t\n\t</bpmn:endEvent>\n\t\n\t<bpmn:exclusiveGateway id=\"Gateway_1wohqvk\">\n\t\t<bpmn:incoming>Flow_11y9y90</bpmn:incoming>\n\t\t<bpmn:incoming>Flow_1af4ho3</bpmn:incoming>\n\t\t<bpmn:outgoing>Flow_0456njg</bpmn:outgoing>\n\t</bpmn:exclusiveGateway>\n\t\n\t<bpmn:sequenceFlow id=\"Flow_11y9y90\" sourceRef=\"StartEvent_1\" targetRef=\"Gateway_1wohqvk\" />\n\t<bpmn:sequenceFlow id=\"Flow_0b7qw0f\" sourceRef=\"Activity_00twabi\" targetRef=\"player-near-gateway\" />\n\t<bpmn:sequenceFlow id=\"Flow_01phsdv\" name=\"YES\" sourceRef=\"player-near-gateway\" targetRef=\"Activity_1gzu948\">\n\t\n\t<bpmn:conditionExpression xsi:type=\"bpmn:tFormalExpression\">=player-near = true</bpmn:conditionExpression>\n\t\n\t</bpmn:sequenceFlow>\n\t\n\t<bpmn:sequenceFlow id=\"Flow_1ed3zvm\" sourceRef=\"Activity_1gzu948\" targetRef=\"happy-end\" />\n\t\n\t<bpmn:sequenceFlow id=\"Flow_0456njg\" sourceRef=\"Gateway_1wohqvk\" targetRef=\"Activity_00twabi\" />\n\t\n\t<bpmn:task id=\"Activity_00twabi\" name=\"IDLE\">\n\t<bpmn:extensionElements />\n\t\t<bpmn:incoming>Flow_0456njg</bpmn:incoming>\n\t\t<bpmn:outgoing>Flow_0b7qw0f</bpmn:outgoing>\n\t</bpmn:task>\n\t\n\t<bpmn:exclusiveGateway id=\"player-near-gateway\" name=\"PLAYER NEAR?\">\n\t<bpmn:extensionElements />\n\t\t<bpmn:incoming>Flow_0b7qw0f</bpmn:incoming>\n\t\t<bpmn:outgoing>Flow_01phsdv</bpmn:outgoing>\n\t\t<bpmn:outgoing>Flow_1af4ho3</bpmn:outgoing>\n\t</bpmn:exclusiveGateway>\n\t\n\t<bpmn:task id=\"Activity_1gzu948\" name=\"FOLLOW PLAYER\">\n\t\t<bpmn:incoming>Flow_01phsdv</bpmn:incoming>\n\t\t<bpmn:outgoing>Flow_1ed3zvm</bpmn:outgoing>\n\t</bpmn:task>\n\t\n\t<bpmn:sequenceFlow id=\"Flow_1af4ho3\" name=\"NO\" sourceRef=\"player-near-gateway\" targetRef=\"Gateway_1wohqvk\">\n\t\t<bpmn:conditionExpression xsi:type=\"bpmn:tFormalExpression\">=player-near = false</bpmn:conditionExpression>\n\t</bpmn:sequenceFlow>\n\t\n\t<bpmn:startEvent id=\"StartEvent_1\" name=\"Start\">\n\t\t<bpmn:outgoing>Flow_11y9y90</bpmn:outgoing>\n\t</bpmn:startEvent>\n</bpmn:process>\n```","x":-110,"y":-520,"width":1060,"height":880},
		{"id":"b0410733b9026c8b","type":"text","text":"#### SCRIPT \n\nEach script task is represented as: \n\n```XML\n<bpmn:task id=\"Activity_1gzu948\" name=\"FOLLOW PLAYER\">\n\t<bpmn:incoming>Flow_01phsdv</bpmn:incoming>\n\t<bpmn:outgoing>Flow_1ed3zvm</bpmn:outgoing>\n</bpmn:task>\n```\n\nWith an `id` parameter and a `name`. \nThe **incoming** and **outgoing** are the id parameter of a sequence floe that interconects the script tasks with the next BPMN element: \n> * incoming -> represents the sequenceFlow id that comes into the task\n> * outgoing -> sequenceFlow that goes out the script\n\nWe need to evaluate the `outgoing` sequenceFlow condition before exiting the code of the script task","x":1120,"y":690,"width":520,"height":490},
		{"id":"6b782362a9ec2e02","type":"text","text":"#### PARTICIPANT\n\nRepresent an actor in the model\n\nits structure is: \n\n```XML\n<bpmn:participant id=\"Participant-xxxxx\" name=\"dadw\" processRef=\"process_ref_A\"/>\n``` \n\nAll the BPMN elements inside a process tag with the same id as the process Ref belongs to that participant:\n\n```XML \n\t<bpmn:process id=\"process_ref_A\">\n\t...\n\t</bpmn:process>\n```\n","x":2057,"y":690,"width":520,"height":480},
		{"id":"03a33aba277d9cd2","type":"text","text":"```cs\nclass Participant : BPMNElement{\n\n\tstring processRef; \n\n\tParticipant(int id, string name) : super(id, name){\n\t\n\t} \n}\n```","x":2014,"y":1340,"width":607,"height":204},
		{"id":"6e4a74c34b9f4655","type":"text","text":"#### BASE CLASS\n\nBecause all items in the diagram are BPMN items, for grouping the code and share functionally and generalization, a base class is declared for having all items to inherit from that: \n\n```CS\nclass BPMNElement : monoBehaviour{\n\tstring id; \n\tstring name; \n}\n```\n\n","x":140,"y":851,"width":560,"height":489},
		{"id":"5f7000a77c29ce69","type":"text","text":"```CSHARP \nclass SequenceFlow : BPMNElement{\n\tBPMNElement source; \n\tBPMNElement target; \n\tFunc<int> condition; \n\n\tSequenceFlow(Func<int>condition){\n\t\tthis.condition = contition\n\t}\n\n\tpublic bool EvaluateCondition(){\n\t\t// Evaluate the condition and return to the calling event\n\t\t// if can continue this way or not\n\t}\n}\n``` ","x":-1320,"y":1402,"width":780,"height":358},
		{"id":"f6b4f0c9fb5681cb","type":"text","text":"```CSHARP \nclass ScriptTask : BPMNElement{\n\tList<SequenceFlow> incoming; \n\tSequenceFlow outgoing; \n\tFunc<void> script; \n\t\n\tScriptTask(int id, string name)\n\n\tprivate void EndTask(){\n\t\t// This need to be called at the end of the task \n\t\t// To telling the participant to continue with the flow\n\t}\n\n}\n``` ","x":1100,"y":1340,"width":680,"height":280},
		{"id":"bf8ddb625f2aab04","type":"text","text":"#### SEQUENCE FLOW\n\nA sequence flow have this structure: \n\n```XML\n\t<bpmn:sequenceFlow id=\"Flow_1af4ho3\" name=\"NO\" sourceRef=\"Gateway_1wohqvk\" targetRef=\"Activity_1gzu948\">\n\t\t<bpmn:conditionExpression xsi:type=\"bpmn:tFormalExpression\">=player-near = false</bpmn:conditionExpression>\n\t</bpmn:sequenceFlow>\n```\n\nHave the next parameters\n\n>* id -> represents the unique id of the element\n>* name -> representative of the element, but not unique \n>* sourceRef -> id of the element the flow is coming from\n>* targetRef -> id of the elements the flow goes to ","x":-1610,"y":690,"width":1140,"height":460},
		{"id":"54fd81b5fa118661","type":"text","text":"#### EXCLUSIVE GATEWAY\n\n```CSHARP \nclass ExclusiveGateway{\n\tSequenceFlow[] incomings; \n\t\n\tint incomingFlowIndex; \n\n\tSequenceFlow[] outgoings; \n\t\n\tint EvaluateOutgoingsConditions()\n\t{\n\t\t// Evaluate all the sequence flows outgoing \n\t\t// and check whether to continue the flow\n\t}\n}\n```","x":-2360,"y":1402,"width":900,"height":378},
		{"id":"ecf4cdf0a67c8278","x":46,"y":1780,"width":748,"height":500,"type":"text","text":"#### Parsing Execution\n\n1. Clean BPMN \n2. Read BPMN \n3. Get Participant\n4. Per each participant: \n\t1. Create `Participant` \n\t2. Create Elements belonging to each Participant \n\t3. Build Participants with its elements into a .cs file\n\n"},
		{"id":"6d9dac370b43e8ba","x":2820,"y":1069,"width":748,"height":271,"color":"2","type":"text","text":"## Participant Execution pipeline\n\n<span style=\"border: 1px solid white; padding: 0.2rem; \">EnterTask()</span> -> <span style=\"border: 1px solid white; padding: 0.2rem; \">UpdateTask()</span> -> <span style=\"border: 1px solid white; padding: 0.2rem; \">EvaluateExitTask()</span>  -> <span style=\"color:cyan; \">repeat or exit through sequence flow</span>\n\n"}
	],
	"edges":[
		{"id":"a5eca3c0af77fe94","fromNode":"d306968d99e47e0b","fromSide":"bottom","toNode":"6e4a74c34b9f4655","toSide":"top"},
		{"id":"c39c31fa23c7bb79","fromNode":"b0410733b9026c8b","fromSide":"bottom","toNode":"f6b4f0c9fb5681cb","toSide":"top"},
		{"id":"19db7b434f769c61","fromNode":"6e4a74c34b9f4655","fromSide":"right","toNode":"f6b4f0c9fb5681cb","toSide":"top","color":"6"},
		{"id":"043d0eefe752c9fc","fromNode":"bf8ddb625f2aab04","fromSide":"bottom","toNode":"5f7000a77c29ce69","toSide":"top"},
		{"id":"46d12274ad55cfc6","fromNode":"6e4a74c34b9f4655","fromSide":"left","toNode":"5f7000a77c29ce69","toSide":"top","color":"6"},
		{"id":"390767a1fecc1025","fromNode":"d306968d99e47e0b","fromSide":"right","toNode":"6b782362a9ec2e02","toSide":"top"},
		{"id":"18a208e86992a45e","fromNode":"6b782362a9ec2e02","fromSide":"bottom","toNode":"03a33aba277d9cd2","toSide":"top"},
		{"id":"e46d456794de93bd","fromNode":"d306968d99e47e0b","fromSide":"left","toNode":"70caa1edae75aeae","toSide":"top"},
		{"id":"f0c57b6fc9e71094","fromNode":"70caa1edae75aeae","fromSide":"right","toNode":"bf8ddb625f2aab04","toSide":"left","fromEnd":"arrow"},
		{"id":"500390552d89c3d9","fromNode":"d306968d99e47e0b","fromSide":"bottom","toNode":"bf8ddb625f2aab04","toSide":"top"},
		{"id":"a394953c9b7518cd","fromNode":"d306968d99e47e0b","fromSide":"bottom","toNode":"b0410733b9026c8b","toSide":"top"},
		{"id":"0e24988dab7f76be","fromNode":"70caa1edae75aeae","fromSide":"bottom","toNode":"54fd81b5fa118661","toSide":"top"},
		{"id":"da1d67158bbfcbd7","fromNode":"6e4a74c34b9f4655","fromSide":"right","toNode":"03a33aba277d9cd2","toSide":"top","color":"6"},
		{"id":"aa9389f0343a8daa","fromNode":"6e4a74c34b9f4655","fromSide":"left","toNode":"54fd81b5fa118661","toSide":"top","color":"6"},
		{"id":"6838dc19ce669c15","fromNode":"6b782362a9ec2e02","fromSide":"right","toNode":"6d9dac370b43e8ba","toSide":"top","color":"2"}
	]
}